import os

import requests
import telebot
from bardapi.core import Bard
from dotenv import load_dotenv

load_dotenv('.env')
BOT_TOKEN = os.environ.get('BOT_TOKEN')
BARD_API_KEY = os.environ.get('BARD_API_KEY')

bot = telebot.TeleBot(BOT_TOKEN)

session = requests.Session()
session.headers = {
    "Host": "bard.google.com",
    "X-Same-Domain": "1",
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36",
    "Content-Type": "application/x-www-form-urlencoded;charset=UTF-8",
    "Origin": "https://bard.google.com",
    "Referer": "https://bard.google.com/",
}
session.cookies.set("__Secure-1PSID", BARD_API_KEY)
bard = Bard(session=session, timeout=30, token=BARD_API_KEY)


def get_response_from_bard(input_text):
    """
    The get_response_from_bard function takes in a string of text and returns the response from the BARD API.
        Args:
            input_text (str): The user's question to be sent to the BARD API.

    Args:

    Returns:
        A dictionary

    Doc Author:
        Trelent
    """
    # Send an API request and get a response.
    response = bard.get_answer(input_text)
    return response['content']


@bot.message_handler(content_types=['text'], commands=['ask'])
def get_query_from_user(message):
    """
    The get_query_from_user function is a callback function that takes in the message object from the user and sends
    a message to the user asking them to ask a question. It then registers another callback function, bard_query_handler,
    to handle what happens next.

    Args:
        message: Get the chat_id of the user who sent a message to the bot

    Returns:
        A message object

    Doc Author:
        Trelent
    """
    text = 'Please ask the AI'
    sent_msg = bot.send_message(chat_id=message.chat.id, text=text, parse_mode='Markdown')
    bot.register_next_step_handler(message=sent_msg, callback=bard_query_handler)


def bard_query_handler(message):
    """
    The bard_query_handler function is the main function that handles user queries.
    It takes in a message object from the Telegram API, and returns a response to the user.
    The response is generated by calling get_response_from_bard() with input text from
    the user's query.

    Args:
        message: Get the chat_id of the user who sent the message

    Returns:
        The response from the bard model

    Doc Author:
        Trelent
    """
    while True:
        user_query = message.text
        if user_query == '/stop':
            return
        print(f'User Query :: {user_query}\n')
        user_query += '\nPlease keep it under 4096 characters.'
        bard_response = get_response_from_bard(input_text=user_query)
        bot.send_message(chat_id=message.chat.id, text="Here's your response!")
        print(f'Response :: {bard_response}')
        print('\n***********************************************************************\n')
        message = bot.send_message(chat_id=message.chat.id, text=bard_response)


def main():
    print('Starting the bot\n')
    bot.infinity_polling()
    # while True:
    #     user_input = input()
    #     if user_input:
    #         print(get_response_from_bard(input_text=user_input))
    #         print('\n***********************************************************************\n')


if __name__ == '__main__':
    main()

